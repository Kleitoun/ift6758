# To build a container, you will use the docker build command
# https://docs.docker.com/engine/reference/commandline/build/
#
#   docker build -t <IMAGE TAG> -f Dockerfile.serving .
#   docker build -t <IMAGE TAG> -f Dockerfile.jupyter .
#


# https://docs.docker.com/engine/reference/builder/#from
# You shouldn't need to change this
FROM python:3.7

# https://docs.docker.com/engine/reference/builder/#workdir
# Create and cd into /code as your working directory
WORKDIR /code
ADD ./ift6758 ./ift6758

RUN pip3 install -r ift6758/requirements.txt && \
    pip3 install -e ift6758

####################### copy only required files ##########
COPY ./app.py ./app.py

CMD gunicorn --bind 0.0.0.0:5000 app:app

EXPOSE 5000

# The main docker commands you will find useful:
# 
# Add a file or directory
# https://docs.docker.com/engine/reference/builder/#add
#  ADD ./<SOURCE_DIR/FILE> ./<DOCKER_DIR/FILE>
#
# Run a shell command (tip: chain shell commands with && rather than multiple RUN commands)
# https://docs.docker.com/engine/reference/builder/#run
#
#       RUN <SHELL COMMAND>   
#
# Set an environment variable:
# https://docs.docker.com/engine/reference/builder/#env
#
#       ENV <ENV_VAR>=<DEFAULT>
#
# Expose a port
# https://docs.docker.com/engine/reference/builder/#port
#
#       EXPOSE <PORT>
#
# Provide default command for executing container
# https://docs.docker.com/engine/reference/builder/#cmd
#
#       CMD <SHELL COMMAND>



# TODO: add code, optionally a default model if you want 
# ADD 

# TODO: install libs


# TODO: expose ports (or do this in docker-compose)
# EXPOSE 80/tcp

# TODO: specify default command - this is not required because you can always specify the command
# either with the docker run command or in the docker-compose file


